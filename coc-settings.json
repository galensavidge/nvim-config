{
    "suggest.autoTrigger": "trigger",
    "suggest.insertMode": "insert",
    "inlayHint.enable": false,
    "pyright.disableDiagnostics": true,
    "python.formatting.provider": "yapf",
    "python.linting.flake8Enabled": true,
    "pyright.organizeimports.provider": "isort",
    "python.sortImports.args": [
        // sorts according to https://google.github.io/styleguide/pyguide.html#22-imports
        // all imports should be on a new line
        "--force-single-line-imports",
        "--force-alphabetical-sort-within-sections",
        // Don't worry about whether we start with `from` or `import`
        "--force-sort-within-sections",
        // the typing module is an exception
        "--single-line-exclusions",
        "typing",
        "--single-line-exclusions",
        "datetime",
        // use parenthesis for grouping a long import that spans multiple lines
        "--use-parentheses",
        // tells isort that certain paths are first party not third party
        "-p",
        "analysis",
        "-p",
        "astranis",
        "-p",
        "bin",
        "-p",
        "geosat",
        "-p",
        "hardware",
        "-p",
        "monte_carlo",
        "-p",
        "ops",
        "-p",
        "scripts"
    ],
    "languageserver": {
        "ccls": {
            "command": "ccls",
            "filetypes": [
                "c",
                "cc",
                "cpp",
                "objc",
                "objcpp"
            ],
            "rootPatterns": [
                ".compiledb",
                ".ccls",
                "compile_commands.json",
                ".vim/",
                ".git/",
                ".hg/"
            ],
            "initializationOptions": {
                "cache": {
                    "directory": "/tmp/ccls"
                },
                "index": {
                    "onChange": true,
                    "threads": 4
                },
                "highlight": {
                    "lsRanges": true
                },
                "compilationDatabaseDirectory": ".compiledb"
            }
        },
        "julia": {
            "command": "julia",
            "args" : ["--project=.", "--startup-file=no", "--history-file=no", "-e", "using LanguageServer; using Pkg; using Revise; import StaticLint; import SymbolServer; env_path = dirname(Pkg.Types.Context().env.project_file); server = LanguageServer.LanguageServerInstance(stdin, stdout, env_path, \"\"); server.runlinter = true; run(server);"],
            "filetypes": ["julia"]
        }
    }
}

